{"version":3,"sources":["services/todos.js","components/Button.js","components/Task.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newTodo","post","id","delete","updatedTodo","put","Button","task","handleMarkingButton","done","style","color","onClick","Task","handleDeleteBtn","backgroundColor","textDecoration","App","useState","todos","setTodos","setNewTodo","useEffect","todosService","returnedTodos","todo","find","map","filter","onSubmit","event","preventDefault","returnedTodo","concat","catch","err","console","log","message","value","onChange","e","target","ReactDOM","render","document","getElementById"],"mappings":"0MACMA,EAAU,aAsBD,EApBA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAkB9B,EAfA,SAAAC,GAEX,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa9B,EAVA,SAAAG,GAEX,OADgBP,IAAMQ,OAAN,UAAgBT,EAAhB,YAA2BQ,IAC5BL,MAAK,SAAAC,GAAQ,OAAEA,EAASC,SAQ5B,EALA,SAACG,EAAIE,GAEhB,OADgBT,IAAMU,IAAN,UAAaX,EAAb,YAAwBQ,GAAME,GAC/BP,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCL9BO,EAfA,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,oBAQpB,OAAID,EAAKE,KACE,wBAAQC,MARN,CACTC,MAAO,OAOqBC,QAAS,kBAAMJ,EAAoBD,EAAKL,KAA7D,eAGJ,wBAAQQ,MARC,CACZC,MAAO,SAOoBC,QAAS,kBAAMJ,EAAoBD,EAAKL,KAAhE,gBCmBIW,EA5BF,SAAC,GAAoD,IAAlDN,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,oBAAqBM,EAAsB,EAAtBA,gBAYvC,OACI,+BACI,6BACI,wBAAQJ,MARF,CACdC,MAAO,MACPI,gBAAiB,SAMiBH,QAAS,kBAAME,EAAgBP,EAAKL,KAA9D,sBAEHK,EAAKE,KACA,oBAAIC,MAfI,CAClBM,eAAgB,gBAcN,SAA2BT,EAAKA,OAChC,6BAAKA,EAAKA,OAEhB,6BACI,cAAC,EAAD,CAAQA,KAAMA,EAAMC,oBAAqBA,EAAqBM,gBAAiBA,UC+DhFG,EAhFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETlB,EAFS,KAEAqB,EAFA,KAKhBC,qBAAU,WACRC,IAAsB1B,MAAK,SAAA2B,GACzBJ,EAASI,QAEV,IAMH,IAsBMhB,EAAsB,SAACN,GAG3B,IAAMuB,EAAON,EAAMO,MAAK,SAAAnB,GAAI,OAAIA,EAAKL,KAAOA,KAGtCF,EAAO,2BAAOyB,GAAP,IAAahB,MAAOgB,EAAKhB,OAGtCc,EACUrB,EAAIF,GACXH,MAAK,SAAAO,GAEJgB,EAASD,EAAMQ,KAAI,SAAAF,GAAI,OAAGA,EAAKvB,KAAOA,EAAKuB,EAAOrB,UAKlDU,EAAkB,SAACZ,GAEvBqB,EACUrB,GAAIL,MAAK,SAAAC,GACfsB,EAASD,EAAMS,QAAO,SAAAH,GAAI,OAAIA,EAAKvB,KAAOA,UAIhD,OACE,gCACE,uCACA,gCACE,gCACGiB,EAAMQ,KAAI,SAAApB,GAAI,OAAI,cAAC,EAAD,CAAoBA,KAAMA,EAAMC,oBAAqBA,EAAsBM,gBAAiBA,GAAjFP,EAAKL,WAGvC,uBAAM2B,SAxDS,SAACC,GAClBA,EAAMC,iBASNR,EANa,CACXhB,KAAMP,EACNS,MAAM,IAMLZ,MAAK,SAAAmC,GACJZ,EAASD,EAAMc,OAAOD,OAEvBE,OAAM,SAAAC,GAAG,OAAGC,QAAQC,IAAI,UAAWF,EAAIG,YAG1CjB,EAAW,KAsCT,UACE,0CADF,SAEQ,uBAAOkB,MAAOvC,EAASwC,SAAU,SAACC,GAAD,OAAKpB,EAAWoB,EAAEC,OAAOH,UAChE,mDC5ERI,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.e8ee5eb6.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/todos'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newTodo => {\r\n    const request = axios.post(baseUrl, newTodo)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst remove = id => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response=>response.data)\r\n}\r\n\r\nconst update = (id, updatedTodo) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, updatedTodo)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, remove, update }","const Button = ({ task, handleMarkingButton }) => {\r\n    const done = {\r\n        color: 'red'\r\n    }\r\n    const notDone = {\r\n        color: 'green'\r\n    }\r\n\r\n    if (task.done) {\r\n        return <button style={done} onClick={() => handleMarkingButton(task.id)}>X</button>\r\n    }\r\n\r\n    return <button style={notDone} onClick={() => handleMarkingButton(task.id)}>V</button>\r\n}\r\n\r\nexport default Button;","import Button from './Button'\r\n\r\n\r\nconst Task = ({ task, handleMarkingButton, handleDeleteBtn }) => {\r\n    \r\n    // Styles\r\n    const strikethrough = {\r\n        textDecoration: 'line-through'\r\n    }\r\n\r\n    const deleteBtn = {\r\n        color: 'red',\r\n        backgroundColor: 'black'\r\n    }\r\n\r\n    return (\r\n        <tr>\r\n            <td>\r\n                <button style={deleteBtn} onClick={() => handleDeleteBtn(task.id)}>delete</button>\r\n            </td>\r\n            {task.done\r\n                ? <td style={strikethrough}>{task.task}</td>\r\n                : <td>{task.task}</td>\r\n            }\r\n            <td>\r\n                <Button task={task} handleMarkingButton={handleMarkingButton} handleDeleteBtn={handleDeleteBtn} />\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default Task;","import { useState, useEffect } from 'react';\nimport './App.css';\n\nimport todosService from './services/todos'\n\nimport Task from './components/Task'\n\n\nconst App = () => {\n  const [todos, setTodos] = useState([])\n  const [newTodo, setNewTodo] = useState('')\n  \n  // After first render - fetch data from MongoDB database\n  useEffect(() => {\n    todosService.getAll().then(returnedTodos => {\n      setTodos(returnedTodos)\n    })\n  }, [])\n\n\n  // ~~~ EVENT HANDLERS ~~~\n  \n  // Form Submission\n  const handleForm = (event) => {\n    event.preventDefault()\n\n    // create new todo\n    const todo = {\n      task: newTodo,\n      done: false\n    }\n\n    // add it to the database(and state variable)\n    todosService\n      .create(todo)\n      .then(returnedTodo => {\n        setTodos(todos.concat(returnedTodo))\n      })\n      .catch(err=> console.log('error: ', err.message))\n\n    // clean form input\n    setNewTodo('')\n  }\n\n  // Marking button\n  const handleMarkingButton = (id) => {\n\n    // find todo, which should be updated (based on given id)\n    const todo = todos.find(task => task.id === id)\n    \n    // update todo\n    const newTodo = {...todo, done: !todo.done}\n\n    // update todo in database\n    todosService\n      .update(id, newTodo)\n      .then(updatedTodo => {\n        // and in state variable 'todos'\n        setTodos(todos.map(todo=> todo.id !== id ? todo : updatedTodo))\n      })\n  }\n\n  // Delete button\n  const handleDeleteBtn = (id) => {\n    // remove todo from database and from state variable 'todos'\n    todosService\n      .remove(id).then(response => {\n        setTodos(todos.filter(todo => todo.id !== id))\n      })\n  }\n\n  return (\n    <div>\n      <h1>TODO:</h1>\n      <table>\n        <tbody>\n          {todos.map(task => <Task key={task.id} task={task} handleMarkingButton={handleMarkingButton}  handleDeleteBtn={handleDeleteBtn}/>)}\n        </tbody>\n      </table>\n      <form onSubmit={handleForm}>\n        <h2>Add todo</h2>\n        todo: <input value={newTodo} onChange={(e)=>setNewTodo(e.target.value)}/>\n        <button>submit</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}